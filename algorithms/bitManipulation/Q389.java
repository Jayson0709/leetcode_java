package algorithms.bitManipulation;

import java.nio.charset.StandardCharsets;
import java.util.Scanner;




//You are given two strings s and t.
//
//    String t is generated by random shuffling string s and then add one more letter at a random position.
//
//    Return the letter that was added to t.
//    
//    Example 1:
//    Input: s = "abcd", t = "abcde"
//    Output: "e"
//    Explanation: 'e' is the letter that was added.
//    
//    Example 2:
//    Input: s = "", t = "y"
//    Output: "y"
//    
//    Constraints:
//    0 <= s.length <= 1000
//    t.length == s.length + 1
//    s and t consist of lowercase English letters.



//给定两个字符串 s 和 t ，它们只包含小写字母。
//
//    字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。
//
//    请找出在 t 中被添加的字母。
//
//    示例 1：
//    输入：s = "abcd", t = "abcde"
//    输出："e"
//    解释：'e' 是那个被添加的字母。
//
//    示例 2：
//    输入：s = "", t = "y"
//    输出："y"
//
//    提示：
//    0 <= s.length <= 1000
//    t.length == s.length + 1
//    s 和 t 只包含小写字母



public class Q389 {
    public static void main(String[] args) {
        Scanner cin = new Scanner(System.in, StandardCharsets.UTF_8);
        String s = cin.nextLine().strip();
        String t = cin.nextLine().strip();
        cin.close();
        System.out.println(findTheDifference(s, t));
    }

    // Method 1: Counting
//    private static char findTheDifference(String s, String t) {
//        int[] cnt = new int[26];
//        for (int i = 0; i < s.length(); i++) {
//            char ch = s.charAt(i);
//            cnt[ch - 'a']++;
//        }
//        for (int i = 0; i < t.length(); i++) {
//            char ch = t.charAt(i);
//            cnt[ch - 'a']--;
//            if (cnt[ch - 'a'] < 0) {
//                return ch;
//            }
//        }
//        return ' ';
//    }

    // Method 2: Math technique
//    private static char findTheDifference(String s, String t) {
//        int as = 0, at = 0;
//        for (int i = 0; i < s.length(); i++) {
//            as += s.charAt(i);
//        }
//        for (int i = 0; i < t.length(); i++) {
//            at += t.charAt(i);
//        }
//        return (char) (at - as);
//    }

    // Method 3: bit manipulation
    private static char findTheDifference(String s, String t) {
        int ret = 0;
        for (int i = 0; i < s.length(); i++) {
            ret ^= s.charAt(i);
        }
        for (int i = 0; i < t.length(); i++) {
            ret ^= t.charAt(i);
        }
        return (char) ret;
    }

}
